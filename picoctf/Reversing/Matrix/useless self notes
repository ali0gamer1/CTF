/*
* ATTENTION: 
* This note does not have any value and it only shows my assumptions and what was going in my head.
* 
*
*
*
*
*
*
*
*
*
*
*/



main -> FUN_001010D0
0x010117e:
	does operation on two variables first one has two bytes: 0x81 0x75 (initially)

strings are stored in a weird way: 
"alive?":     
	001020f8 3f              ??         3Fh    ?
        001020f9 80              ??         80h
        001020fa 65              ??         65h    e
        001020fb 80              ??         80h
        001020fc 76              ??         76h    v
        001020fd 80              ??         80h
        001020fe 69              ??         69h    i
        001020ff 80              ??         80h
        00102100 6c              ??         6Ch    l
        00102101 80              ??         80h
        00102102 61              ??         61h    a
every character is seperated by junk and stored in reverse order.
new discovery:
This binary has a small vm that calculates opcodes and executes them,The function for that matter is 0x010117e


new discovery2:

	I just found out that there are actually two function calls in 0x010117e
	one with a param and one wihout... i have to look further to see if there are function calls that take more params. 
	custom opcode for that is 0xc1

new discovery3: (not all are correct)
	somedata[2] seems to be used as some sort of a storage.
	in order to print a character this bytes have to be executed by the VM:
		'0x81', '0x30', '0x10', '0x81', '0x31', '0xc1'
	and the pseudo code that handles this is:
		    if (opcode == 0xc1) {
     			 uVar1 = *(undefined *)(somedata[2] + -2);
      			 somedata[2] = somedata[2] + -2; //Load each char in reverse order.
      			(*(code *)somedata[5])(uVar1);
      			return 1;
    		    }
	

imp note:
	0x00005555555560f0: Program memory (somedata[0])
	0x0000000100c3007c: Not sure what this is but it's value changes on every loop (maybe pc or maybe just an index). 0x7fffffffe468.
	0x00005555555592a6: Some kind of buffer filled with 0x0141. (somedata[2])
	0x0000555555559ab0: somedata[3] IDK anything about it.

new discovery:
	somedata[2] gets populated first and then other opcodes are executed.
	first its gets filled with strings that are printed when you execute the program and then filled with junk.

dest variable found in bp 0x000055555555544b: 0x7fffffffe48ci
 new discovery:
	0x5555555560f1
	i think this is the address of the variable that gets checked if 0 and if 0 we win.
